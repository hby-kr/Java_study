(함수형 언어(js)와 객체지향 언어(java)로 잠정하고 설명)
(js는 class와 constructor 사용 안하고, 함수는 객체를 리터럴 방식으로 생성하고 그 안에 메서드를 포함시키는 방법을 사용)


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  >>    함수형 언어 (JavaScript)
불변성(immutability)과 순수 함수(pure function)를 강조


- 상태의 불변성(immutability)
   함수형 프로그래밍에서 문제를 해결할 때는 상태를 변경하는 대신 새로운 값을 반환하는 방식으로 접근
   프로그램에서 상태를 변경하려면, 기존 값을 수정하거나 업데이트하는 방식으로 작업합니다.
   함수형 프로그래밍에서는 "상태를 변경하지 않는다"는 것이 매우 중요합니다.
   즉, 현재 상태를 수정하지 않고 새로운 상태를 만들어서 반환하는 방식으로 작업.

      상태를 변경하는 방식:
         계좌 잔액이 1000원인 상태에서 500원을 입금하면, 기존 잔액 1000원을 변경하여 1500원으로 만듭니다.
      상태를 변경하지 않는 방식 (함수형):
         새로운 계좌를 만들어서 1500원을 담고, 기존 계좌는 그대로 1000원으로 유지됩니다.
         즉, 원래 상태는 건드리지 않고, 새로운 계좌를 만들어서 반환합니다.

- 순수 함수(pure function)를 강조
순수 함수(pure function)는 다음 두 가지 특징을 가지고 있습니다:
1. 입력값만으로 결과를 계산한다:
   순수 함수는 함수 내부에서 외부 변수나 상태를 참조하지 않고, 입력값만을 이용해 계산을 합니다.
   예를 들어, add(a, b)라는 함수가 있다고 할 때, 이 함수는 오직 a와 b 값만을 가지고 계산을 합니다. 
   함수 외부의 어떤 값도 영향을 미치지 않습니다.

2. 같은 입력값에 대해 항상 같은 출력을 반환한다:
순수 함수는 입력값이 같으면 항상 같은 결과를 반환합니다.


함수형 언어에서는 **순수 함수(Pure Function)**를 중요하게 생각합니다.
순수 함수는 동일한 입력에 대해 항상 동일한 출력을 반환하고, 외부 상태를 변경하지 않으며, 부수 효과를 발생시키지 않습니다. 

함수가 매개변수로 원시형 데이터를 받으면, 데이터는 변경되지 않기 때문에 순수 함수의 특성을 잘 유지할 수 있습니다.

자료형 데이터가 함수에 전달될 때, 이를 변경하지 않도록 설계해야만 부수 효과를 방지하고 불변성을 유지할 수 있습니다.
반면, 자료형 데이터의 변경이 가능하면 프로그램의 예측 가능성을 떨어뜨리고, 버그를 발생시킬 수 있습니다.

따라서 함수형 언어로 코딩할 때, 매개변수로 전달된 자료형 데이터가 함수 내에서 변화되지 않도록 최대한 노력해야 합니다.

함수가 매개변수로 받은 자료형 데이터가 변경되지 않도록 하려면, 기존 데이터는 수정하지 않고, 
새로운 데이터를 만들어서 반환하는 방식으로 처리해야 합니다.
예를 들어, 리스트나 객체와 같은 자료형 데이터에 대해 직접 변경을 하지 않고, 
"필요한 데이터를 포함하는 새로운 리스트나 객체를 만들어서 반환"하는 방식입니다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  >>    객체지향 언어 (Java)
문제를 해결할 때 객체를 중심으로 접근합니다.
객체는 데이터(속성_필드)를 포함하고 있으며, 해당 데이터를 처리하는 메서드를 제공합니다. 
객체 상태는 변경 가능(Mutable)할 수 있습니다


계좌 상태(잔액)는 Account 객체의 속성(필드)로 유지됩니다.
deposit, withdraw 메서드는 객체의 상태를 변경합니다.




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
상태 처리 방식:
   JavaScript (함수형): 상태를 불변으로 처리하며, 함수는 새로운 상태를 반환합니다. 기존 상태를 변경하지 않습니다.
   Java (객체지향): 상태를 변경 가능하게 처리하며, 객체의 메서드를 통해 상태를 변경합니다.

데이터와 함수의 관계:
   JavaScript (함수형): 데이터와 함수가 분리되어 있으며, 데이터는 변하지 않고 함수를 통해 새로운 데이터를 생성합니다.
   Java (객체지향): 데이터와 메서드가 하나의 객체 내에서 함께 존재하며, 메서드를 통해 데이터의 상태를 변경합니다.

변경 가능한 상태:
   JavaScript (함수형): 상태 변경을 피하려 하며, 변경이 필요한 경우 새로운 데이터를 반환합니다.
   Java (객체지향): 객체 상태를 변경하며, 이를 통해 데이터를 관리합니다.


