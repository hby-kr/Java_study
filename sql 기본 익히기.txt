sql 기본 익히기

SQL과 MySQL은 서로 다른 개념이지만 밀접하게 관련이 있습니다.
1. SQL (Structured Query Language)은 언어!!
데이터베이스 관리 시스템(DBMS)에서 데이터를 관리하고 쿼리하는 데 사용되는 언어.
데이터베이스의 생성, 수정, 조회, 삭제 등의 작업을 수행할 수 있게 해줍니다.
특징:
   주요 SQL 명령어로는 SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP 등이 있습니다.
   SQL은 표준화된 언어로, 대부분의 DBMS에서 공통적으로 사용되지만, 각 DBMS는 SQL의 구현 방식에 차이가 있을 수 있습니다.

2. MySQL
정의: MySQL은 **데이터베이스 관리 시스템(DBMS)**의 하나로, 데이터를 저장하고 관리하는 소프트웨어입니다. 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


>> MySQL 계층 구조
MySQL의 계층 구조는 서버 → 데이터베이스 → 테이블 → 열/행 순으로 구성되어 있습니다.


0. 저장소의 이름을 스키마
스키마라는 단어는 ‘형태’ 또는 ‘모양’을 뜻하는 그리스어에서 유래하였습니다.
**스키마(Schema)**는 데이터베이스의 구조를 정의한 것입니다.
즉, 데이터베이스 안에 어떤 테이블들이 있으며, 각 테이블에 어떤 열(칼럼)이 있고, 이 열들이 어떤 데이터 타입을 가질지 등을 정의하는 기록

   > 스키마 vs 데이터베이스
   데이터베이스는
      실제로 데이터를 저장하는 물리적인 단위이며, MySQL에서는 "스키마"와 동일한 의미로 사용될 수 있습니다. 즉 데이터가 실제로 저장된 장소.
   스키마는
      구조적인 정의를 의미하며, 데이터베이스 내의 테이블, 열, 관계, 인덱스 등의 정의를 포함하는 "설계도"라고 할 수 있습니다.


1. MySQL 서버 (Server)
최상위 계층: MySQL 서버는 MySQL 데이터베이스 관리 시스템의 가장 큰 단위로, 여러 개의 데이터베이스를 관리

2. 데이터베이스 (Database)
2번째 계층: 데이터베이스는 서버 내에서 데이터를 저장할 수 있는 논리적인 컨테이너

3. 테이블 (Table)
3번째 계층: 데이터베이스 내에서 테이블은 실제로 데이터를 저장하는 기본적인 단위입니다. 각 테이블은 여러 개의 행(레코드)과 열(컬럼)을 가지고 있습니다.

4. 열 (Column)
열은 테이블 내에서 하나의 데이터 속성을 나타냅니다. 
각 열은 특정 데이터 타입(예: INT, VARCHAR, DATE)을 가집니다.
하나의 테이블에 여러 열이 존재할 수 있으며, 각 열은 동일한 데이터 형식을 가진 값을 저장합니다.

5. 행 (Row)
행(또는 레코드)은 테이블 내에서 열에 해당하는 여러 값을 하나로 묶은 데이터의 한 단위입니다.
각 행은 하나의 개별 데이터를 나타냅니다.
예시: id = 1, name = "John", birthdate = "1990-01-01", salary = 50000과 같은 데이터를 하나의 행으로 저장할 수 있습니다.

ㅡㅡㅡ 그 밖에
6. 인덱스 (Index)
인덱스는 데이터 검색을 빠르게 하기 위해 테이블의 특정 열에 대해 만들어지는 자료구조입니다.
인덱스를 사용하면 데이터 검색 성능을 향상시킬 수 있습니다.
예시: CREATE INDEX idx_name ON employees(name);

7. 뷰 (View)
뷰는 실제 데이터를 저장하지 않고, 하나 이상의 테이블에서 데이터를 가져와 결과를 표시하는 가상의 테이블입니다. 주로 복잡한 쿼리를 단순화하기 위해 사용됩니다.

8.  저장 프로시저 (Stored Procedure)
저장 프로시저는 MySQL 서버 내에서 저장되고 실행될 수 있는 SQL 코드의 집합입니다. 복잡한 로직을 데이터베이스 내부에서 처리할 수 있도록 합니다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

>> DB의 데이터의 유형
문자열, 숫자, boolean, 라스트, 셋, map, 큐, stack

   > map
   Map은 **키(Key)**와 **값(Value)**을 한 쌍으로 저장하는 자료구조입니다.
   각 키는 고유해야 하며, 그 키에 대응하는 값을 효율적으로 조회할 수 있습니다.
   일반적으로 해시맵(HashMap) 또는 **딕셔너리(Dictionary)**라고도 불립니다.

   > Stack (스택)
   Stack은 LIFO (Last In, First Out) 방식의 자료구조입니다. 
   즉, 나중에 들어온 데이터가 먼저 나오는 구조

   > Queue (큐)
   Queue는 FIFO (First In, First Out) 방식의 자료구조입니다. 즉, 먼저 들어온 데이터가 먼저 나가는 구조


>> 저장방식
table (=result set)(엑셀처럼, 행(row)과 열(column)로 구성된 2차원 표 형식) 
   => SQL (relational db, schema db)
   *Result Set은 데이터베이스에서 SQL 쿼리를 실행한 후 반환되는 데이터의 집합을 말합니다.
   예를 들어, SELECT 쿼리를 실행하면 데이터베이스에서 쿼리 조건에 맞는 데이터를 찾아서 결과 집합으로 반환합니다.
   예: MySQL, PostgreSQL, Oracle.
   MariaDB는 MySQL의 완전한 호환성을 유지하며, MySQL을 대체할 수 있는 오픈 소스 데이터베이스입니다. 

Json {"key":"value", "key2":"value2", "key3":"value3"} 
; sql의 단점을 보완했는데, 장점을 가지지 못한 형식
   => NoSQL (not only sql, non-relational sql, schemaless db)
   예: MongoDB, Redis, Cassandra.


>> DBMS (Database Management System)
DBMS는 데이터베이스를 관리하는 시스템 소프트웨어로, 
사용자가 데이터베이스를 쉽게 사용할 수 있도록 도와주는 역할을 합니다. 
예를 들어, MySQL, PostgreSQL, Oracle, Microsoft SQL Server 등이 DBMS에 해당

>> SQL (Structured Query Language)
SQL은 데이터베이스와 상호작용하는 데 사용되는 언어입니다.
SQL을 통해 데이터를 삽입, 조회, 수정, 삭제하는 작업을 할 수 있습니다.
주요 SQL 명령어는 다음과 같습니다:
   SELECT: 데이터를 조회합니다.
   INSERT: 데이터를 삽입합니다.
   UPDATE: 데이터를 수정합니다.
   DELETE: 데이터를 삭제합니다.


>> 관계형 데이터베이스
관계형 데이터베이스는 테이블 간의 관계를 정의하는 방식
- 데이터베이스의 종류
   관계형 데이터베이스(RDBMS): 데이터가 테이블 형태로 저장되고, 테이블 간에 관계를 정의하는 방식입니다. 예: MySQL, PostgreSQL, Oracle
   비관계형 데이터베이스(NoSQL): 테이블 간의 관계를 정의하지 않으며, 다양한 형태의 데이터를 저장할 수 있습니다. 예: MongoDB, Cassandra
   

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
데이터베이스(DB)의 주요 특성

1. 일관성 (Consistency)
   데이터베이스는 항상 정확하고 규칙에 맞는 상태를 유지해야 합니다.
   예를 들어, 학생 성적이 잘못된 범위에 들어가지 않도록 보장하는 것처럼, 잘못된 데이터가 들어가지 않게 합니다.

2. 원자성 (Atomicity)
   트랜잭션(데이터 처리)이 완전하게 이루어지거나 아예 실행되지 않도록 보장합니다.
   예를 들어, 은행에서 돈을 보내는 작업은 돈을 빼고 보내는 작업이 모두 성공해야만 완료됩니다. 
   중간에 실패하면 그 작업은 전혀 실행되지 않은 것처럼 처리됩니다.
      >> 트랜잭션 Transaction(=처리)
      데이터베이스에서 트랜잭션은 일련의 작업을 하나의 단위로 처리하는 것입니다.
      트랜잭션은 데이터베이스에서 한 번의 작업을 의미합니다.
      트랜잭션은 원자성(Atomicity), 일관성(Consistency), 고립성(Isolation), **지속성(Durability)**을 보장하는 ACID 속성을 따릅니다.
      트랜잭션을 통해 데이터의 무결성과 안정성을 보장합니다.

3. 고립성 (Isolation)
   여러 작업이 동시에 실행될 때, 다른 작업들이 서로 영향을 미치지 않도록 합니다. 
   예를 들어, 두 사람이 동시에 같은 은행 계좌에서 돈을 뺄 때, 서로의 작업이 방해되지 않도록 합니다.

4. 지속성 (Durability)
   한 번 처리된 데이터는 영원히 저장됩니다. 
   예를 들어, 컴퓨터가 꺼져도 트랜잭션이 끝난 데이터는 사라지지 않고 안전하게 저장됩니다.

5. 동시성 (Concurrency)
   여러 사람이 동시에 데이터베이스를 사용할 수 있게 합니다. 
   하지만 동시에 작업을 하더라도 충돌이 발생하지 않도록 처리합니다.

6. 확장성 (Scalability)
   데이터베이스는 데이터가 늘어나도 성능을 잘 유지할 수 있도록 확장할 수 있습니다. 
   즉, 사용자 수가 많아져도 처리할 수 있도록 설계되어 있습니다.

7. 보안 (Security)
   데이터베이스는 민감한 정보를 보호할 수 있어야 합니다. 
   사용자의 권한에 맞게 데이터를 접근하거나 수정할 수 있게 하여 정보가 안전하게 보호됩니다.

8. 복구 (Recovery)
   시스템에 문제가 생겨도 데이터를 복구할 수 있는 기능이 있어 데이터 손실을 방지합니다.

9. 유연성 (Flexibility)
   다양한 형태의 데이터를 저장하고 관리할 수 있는 유연성을 제공합니다. 
   예를 들어, 숫자, 문자, 이미지 등을 모두 처리할 수 있습니다.

10. 효율성 (Efficiency)
   데이터베이스는 빠르고 효율적으로 데이터를 처리하고, 
   쿼리나 검색 속도를 최적화하여 사용자가 빠르게 필요한 정보를 얻을 수 있게 합니다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

>> 기본 키 (Primary Key)
**기본 키(Primary Key)**는 각 행을 고유하게 식별할 수 있는 열입니다.
예를 들어, 학생 테이블에서는 학생ID가 기본 키일 수 있습니다.
기본 키는 중복 값이 없어야 하며 NULL 값을 허용하지 않습니다.

>> 외래 키 (Foreign Key)
**외래 키(Foreign Key)**는 다른 테이블과 관계를 맺는 열입니다.
외래 키를 사용하여 두 테이블 간의 연결을 만듭니다.
예를 들어, 학생과 수업 테이블을 연결할 때, 학생 테이블의 학생ID를 수업 테이블에서 외래 키로 사용하여 학생과 수업 간의 관계를 설정할 수 있습니다.

>> 정규화 (Normalization)
정규화는 데이터를 효율적으로 저장하고, 중복을 최소화하기 위한 과정입니다. 
이 과정은 데이터를 여러 테이블에 나누어 저장하고, 각 테이블이 독립적인 정보를 담도록 만듭니다.
예시: 학생과 성적 정보를 두 테이블로 나누어 성적 정보만 따로 저장하는 방식입니다.

>> 인덱스 (Index)
인덱스는 데이터 검색을 빠르게 하기 위한 자료구조입니다. 
데이터가 많아지면 검색 시간이 길어지는데, 인덱스를 사용하면 이를 개선할 수 있습니다.
예를 들어, 책의 목차처럼 특정 항목을 빠르게 찾을 수 있게 도와줍니다.

>> 쿼리 (Query)
쿼리는 데이터베이스에 질의를 보내는 명령어입니다.
SELECT, INSERT, UPDATE, DELETE 등이 있습니다.
예시:
데이터 조회: SELECT 이름 FROM 학생 WHERE 성적 > 90;
데이터 수정: UPDATE 학생 SET 성적 = 95 WHERE 학생ID = 1;



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
SQL라를 언어의 여러 구문들을 분류해보자
데이터베이스에서 데이터를 다루는 언어의 두 가지 주요 카테고리

DML (Data Manipulation Language): 데이터 삽입, 수정, 삭제
DQL (Data Query Language): 데이터 조회
DDL (Data Definition Language): 데이터베이스 구조 정의 및 관리
DCL (Data Control Language): 데이터베이스 권한 제어
TCL (Transaction Control Language): 트랜잭션 관리

ㅡㅡㅡㅡㅡㅡㅡ
DML / DQL 
   DML (Data Manipulation Language)과 DQL (Data Query Language)
   DML은 데이터의 변경을 담당하고, DQL은 조회만 담당합니다.
   DML: 데이터를 삽입(INSERT), 수정(UPDATE), 삭제(DELETE)하는 명령어들.
   DQL: 데이터를 조회(SELECT)하는 명령어.

ㅡㅡㅡㅡㅡㅡㅡ
그 밖에 카테고리 
DDL (Data Definition Language): 데이터베이스 구조 정의 및 관리
   CREATE: 새로운 테이블, 뷰, 인덱스 등을 생성
   ALTER: 기존 테이블의 구조를 변경 (예: 열 추가, 삭제)
   DROP: 테이블, 뷰, 인덱스 등을 삭제
   TRUNCATE: 테이블의 데이터를 삭제하지만 테이블 구조는 유지
DCL (Data Control Language): 데이터베이스 권한 제어
   GRANT: 사용자가 특정 권한을 부여받을 수 있도록 함
   REVOKE: 사용자가 가지고 있던 권한을 철회
TCL (Transaction Control Language): 트랜잭션 관리,제어
   트랜잭션은 데이터베이스 작업의 논리적인 단위로, 작업이 완료되었을 때 데이터를 확정하거나 취소할 수 있습니다.

ㅡㅡㅡㅡㅡㅡㅡ
다섯 가지 주요 카테고리 외의 명령어:
SHOW: 데이터베이스 객체나 설정 정보를 조회
DESCRIBE: 테이블 구조를 조회
EXPLAIN: 쿼리 실행 계획을 조회

ㅡㅡㅡㅡ
특정 DBMS 전용 명령어 (DBMS-Specific Commands)
MySQL: LOAD DATA, START TRANSACTION
PostgreSQL: VACUUM, COPY
Oracle: FLASHBACK, ALTER SYSTEM


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\
SQL 기본 명령어 익히기

1. MySQL에 접속하기
   mysql -u 사용자이름 -p


2. 데이터베이스 관리 명령어

   SHOW DATABASES;  / 데이터베이스 목록 보기

   USE 데이터베이스명;   / 데이터베이스 선택
      USE company_db;
      이제 company_db 데이터베이스 내에서 쿼리를 실행할 준비가 됩니다.

   CREATE DATABASE 데이터베이스명;  / 데이터베이스 생성
      CREATE DATABASE company_db;
      company_db라는 이름의 새 데이터베이스를 생성

   DROP DATABASE 데이터베이스명;   / 데이터베이스 삭제
      DROP DATABASE company_db;
      company_db라는 데이터베이스를 삭제합니다.


3. 테이블 관리 명령어

   SHOW TABLES;   / 테이블 목록 보기
   DESC 테이블명;   /  (DESCRIBE) 테이블 구조 보기

   CREATE TABLE   / 테이블 생성
      CREATE TABLE employees (
         employee_id INT PRIMARY KEY,
         name VARCHAR(100),
         position VARCHAR(50),
         salary DECIMAL(10, 2)
      );
      employees라는 테이블을 생성하고, 직원 ID, 이름, 직책, 급여 정보를 저장할 수 있도록 합니다.

   DROP TABLE 테이블명;  /  테이블 삭제
      DROP TABLE employees;
      employees 테이블을 삭제합니다.

   ALTER TABLE / 수정 (컬럼 추가): 
      ALTER TABLE employees ADD hire_date DATE;
      employees 테이블에 hire_date라는 새로운 컬럼을 추가

 

4. 데이터 관리 명령어

 - 데이터 조회
   SELECT * FROM 테이블명;
- 데이터 조회 (조건 추가)
   SELECT * FROM 테이블명 WHERE 조건;


   - 데이터 삽입
      INSERT INTO employees (employee_id, name, position, salary)
      VALUES (1, 'John Doe', 'Manager', 5000.00);
      employees 테이블에 직원 정보를 삽입합니다. employee_id는 1, name은 'John Doe', position은 'Manager', salary는 5000.00으로 지정합니다.

   - 데이터 수정
   UPDATE employees
   SET salary = 5500.00
   WHERE employee_id = 1;
      employee_id가 1인 직원의 급여를 5500.00으로 수정합니다

   - 데이터 삭제
   DELETE FROM employees WHERE employee_id = 1;
   employee_id가 1인 직원의 데이터를 삭제합니다.



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
>>> sql의 기본 명령어 익히기

SELECT: 데이터베이스에서 데이터를 조회합니다.

INSERT: 테이블에 새로운 데이터를 추가합니다.
UPDATE: 테이블의 기존 데이터를 수정합니다.
DELETE: 테이블에서 데이터를 삭제합니다.

CREATE TABLE: 새로운 테이블을 생성합니다.
ALTER TABLE: 기존 테이블의 구조를 수정합니다.
DROP TABLE: 테이블을 삭제합니다.


WHERE: 조건을 지정하여 데이터 필터링합니다.
ORDER BY: 조회 결과를 정렬합니다.
AND, OR, NOT: 조건을 결합하거나 반전시킵니다.
GROUP BY: 데이터를 그룹화하여 집계함수를 사용합니다.
HAVING: 그룹화된 데이터에 조건을 추가합니다.
JOIN: 여러 테이블을 결합하여 데이터를 조회합니다.

ㅡㅡㅡㅡㅡ
>>  SELECT: 데이터베이스에서 데이터를 조회합니다.

   1. 모든 컬럼 조회
   SELECT *는 테이블의 모든 컬럼을 조회하는 쿼리
   *는 "모든 컬럼"을 의미합니다.

   예시: 여기서 *는 employees 테이블의 모든 컬럼을 의미하고, FROM employees는 조회할 테이블을 지정합니다.
   SELECT * FROM employees;
ㅡㅡㅡ

   2. 특정 컬럼 조회
   테이블에서 필요한 특정 컬럼만 조회

   예시: employees 테이블에서 name과 age 컬럼만 조회
   SELECT name, age FROM employees;
ㅡㅡㅡ

   3. 조건에 맞는 데이터 조회 (WHERE)
   WHERE 절을 사용하여 특정 조건을 만족하는 데이터만 조회할 수 있습니다.

   예시: employees 테이블에서 age가 30 이상인 직원들만 조회
   SELECT * FROM employees WHERE age >= 30;
ㅡㅡㅡ

   4. 정렬하여 조회 (ORDER BY)
   ORDER BY 절을 사용하여 결과를 정렬할 수 있습니다. 
   기본적으로 오름차순(ASC)으로 정렬되며, 내림차순(DESC)으로도 정렬할 수 있습니다.

   예시: employees 테이블에서 age를 기준으로 내림차순으로 정렬하여 조회
   SELECT * FROM employees ORDER BY age DESC;
ㅡㅡㅡ

   5. 조건과 정렬 결합 (WHERE + ORDER BY)
   WHERE 절과 ORDER BY 절을 결합하여 조건을 만족하는 데이터만 정렬하여 조회할 수 있습니다.

   예시: employees 테이블에서 age가 30 이상인 직원들만 조회하고, 그 결과를 name 기준으로 오름차순으로 정렬
   SELECT * FROM employees WHERE age >= 30 ORDER BY name ASC;
ㅡㅡㅡ

   6. 중복된 데이터 제거 (DISTINCT)
   DISTINCT는 중복된 값을 제거하고 유일한 값만 조회할 때 사용됩니다.

   예시: employees 테이블에서 중복된 department 값을 제거하고 유일한 부서명만 조회
   SELECT DISTINCT department FROM employees;
ㅡㅡㅡ

   7. LIMIT을 사용한 결과 개수 제한
   LIMIT을 사용하여 조회할 데이터의 개수를 제한할 수 있습니다.

   예시: employees 테이블에서 첫 5개의 레코드만 조회
   SELECT * FROM employees LIMIT 5;
ㅡㅡㅡ

   8. AND, OR, NOT을 사용한 복잡한 조건
   AND, OR, NOT을 사용하여 여러 조건을 결합할 수 있습니다.

   AND는 두 조건을 모두 만족하는 데이터를 조회합니다.
   예시: employees 테이블에서 나이가 30 이하이거나 부서가 Sales인 직원 조회
   SELECT * FROM employees WHERE age <= 30 OR department = 'Sales';

   OR는 두 조건 중 하나라도 만족하는 데이터를 조회합니다.
   예시: employees 테이블에서 age가 30 이하가 아닌 직원들만 조회
   SELECT * FROM employees WHERE NOT age <= 30;

   NOT은 조건을 반전시켜서 조건을 만족하지 않는 데이터를 조회합니다.
ㅡㅡㅡ

   9. 컬럼 값 계산 (산술 연산)
   SELECT에서 산술 연산을 통해 값을 계산할 수 있습니다.

   예시: employees 테이블에서 직원의 나이에 5년을 더한 값을 조회
   SELECT name, age + 5 AS new_age FROM employees;


ㅡㅡㅡㅡ
>> SQL에서 AS는 **별칭(alias)**을 지정하는 데 사용되는 선택적 키워드.
선택적이라, AS를 생략하고도 컬럼이나 결과 값에 직접 새로운 이름을 지정할 수 있습니다.

> 일반 데이터 불러오기에 이름 붙이기
SELECT city_id 합, street_name 주소
FROM address
WHERE city_id < 500 AND city_id > 100;

> 그룹함수에 이름 붙이기
SELECT SUM(city_id) AS 합, AVG(city_id) AS 평균
FROM address
WHERE city_id < 500 AND city_id > 100;



ㅡㅡㅡㅡㅡㅡㅡㅡ
SQL 구문 순서:
   SELECT
   FROM (테이블 지정)
      AS는 보통 SELECT 절이나 FROM 절에서 사용
   WHERE (조건 필터링) 
      IN (IN 구문은 반드시 WHERE 절 내에서 사용)
      AND OR NOT IS NULL BETWEEN 등등

   GROUP BY (그룹화)
   HAVING (그룹화된 결과에 대한 조건 필터링, 선택적)

   ORDER BY (정렬)
   LIMIT (페이징)
예시:
   SELECT column1, column2
   FROM table_name
   WHERE column1 IN ('value1', 'value2', 'value3')
   GROUP BY column1
   ORDER BY column1
   LIMIT 0, 10;
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
WHERE 절과 함께 사용하는 조건 연산자
   = (같음)
   != 또는 <> (다름)
   > (크다)
   < (작다)
   >= (크거나 같다)
   <= (작거나 같다)
   BETWEEN (범위 내 포함)
   LIKE (패턴 매칭)
   IN (목록에 포함)
   IS NULL (NULL 값 체크)
   AND (복수 조건 만족)
   OR (조건 중 하나 만족)
   NOT (조건이 특정 반대인 데이터 찾기)
ㅡㅡㅡㅡ
= (같음) ; 특정 값과 정확히 일치하는 데이터를 찾을 때 사용
   SELECT * FROM employees WHERE department = 'Sales';
      'Sales' 부서에 속하는 모든 직원들의 정보를 조회하면서, department가 'Sales'인 직원들을 찾는 경우. 사용

!= 또는 <> (다름) ; != 또는 <>는 특정 값과 다른 데이터를 찾을 때 사용
   SELECT * FROM employees WHERE department != 'Sales';  
      employees 테이블에서 department가 'Sales'가 아닌 직원들을 찾는 경우.

특정 값보다 크거나, 작거나, 크거나 같거나, 작거나 같거나한 데이터를 찾을 때 사용
> (크다)   /  < (작다)  /  >= (크거나 같다)  / <= (작거나 같다) 
SELECT * FROM employees WHERE age > 30;
   employees 테이블에서 나이가 30세 이상인 직원들을 찾는 경우.
SELECT * FROM employees WHERE age < 30;
   employees 테이블에서 나이가 30세 미만인 직원들을 찾는 경우.
SELECT * FROM employees WHERE salary >= 50000;
   employees 테이블에서 연봉이 50,000 이상인 직원들을 찾는 경우
SELECT * FROM employees WHERE salary <= 50000;
   employees 테이블에서 연봉이 50,000 이하인 직원들을 찾는 경우


BETWEEN (범위 내 포함) ; 두 값 사이의 범위 내에 포함된 데이터를 찾을 때 사용 
   SELECT * FROM employees WHERE age BETWEEN 25 AND 35;
      employees 테이블에서 나이가 25세 이상 35세 이하인 직원들을 찾는 경우.

LIKE (패턴 매칭) ;  문자열에서 특정 패턴을 만족하는 데이터를 찾을 때 사용
   SELECT * FROM employees WHERE name LIKE 'J%';
      employees 테이블에서 이름이 'J'로 시작하는 직원들을 찾는 경우

IN (목록에 포함); 특정 열의 값이 여러 값 중 하나와 일치하는 데이터를 찾을 때 사용
   SELECT * FROM employees WHERE department IN ('Sales', 'Marketing');
      employees 테이블에서 부서department가 'Sales' 또는 'Marketing'인 직원들을 찾는 경우.

      IN 연산자는 지정된 열의 값이 value1, value2, ... 중 하나와 일치하면 조건이 참이 됩니다.
      1. 단순 비교
      특정 값들 중 하나를 만족하는 행을 선택하는 예시입니다.
      2. 숫자 값 비교
      숫자 값을 비교할 때도 IN을 사용할 수 있습니다.
      3. 서브쿼리 사용
      IN 연산자는 서브쿼리와 함께 사용할 수 있습니다. 
         SELECT first_name, last_name 
         FROM employees
         WHERE department IN (SELECT department FROM departments WHERE location = 'New York');
      4. NOT IN
      IN의 반대 연산자인 NOT IN은 특정 값들 중 하나도 일치하지 않는 행을 선택할 때 사용됩니다.
         SELECT * 
         FROM employees
         WHERE department NOT IN ('Sales', 'Marketing');

IS NULL (NULL 값 체크);  특정 열의 값이 NULL인 데이터를 찾을 때 사용
   SELECT * FROM employees WHERE department IS NULL;
      employees 테이블에서 부서가 할당되지 않은 직원을 찾는 경우.


AND (복수 조건 만족);  여러 조건을 모두 만족하는 데이터를 찾을 때 사용
   SELECT * FROM employees WHERE age > 30 AND salary > 50000;
      employees 테이블에서 나이가 30세 이상이고 연봉이 50,000 이상인 직원을 찾는 경우.

OR (조건 중 하나라도 만족);  여러 조건 중 하나라도 만족하는 데이터를 찾을 때 사용
   SELECT * FROM employees WHERE age > 30 OR department = 'Sales';
      employees 테이블에서 나이가 30세 이상이거나 부서가 'Sales'인 직원을 찾는 경우.

NOT (특정 조건을 반대로 바꾸는 역할)
   SELECT * FROM employees WHERE NOT department = 'Sales';
      employees 테이블에서 부서가 'Sales'가 아닌 직원들을 찾는 경우.

>> NOT을 좀 더 구체적으로 사용하기.

NOT과 AND 결합 사용
   SELECT * FROM employees WHERE NOT (age < 30 AND department = 'Sales');
      employees 테이블에서 나이가 30세 미만이고 부서가 'Sales'인 직원이 아닌 사람들을 찾고 싶은 경우.

NOT과 OR 결합 사용
   SELECT * FROM employees WHERE NOT (age < 30 OR department = 'Sales');
      employees 테이블에서 나이가 30세 미만이거나 부서가 'Sales'인 직원이 아닌 사람들을 찾고 싶은 경우.

NOT NULL: NULL이 아닌 값을 찾습니다
   SELECT * FROM employees WHERE department IS NOT NULL;
      employees 테이블에서 부서 정보가 존재하는 직원들을 찾는 경우.

   SELECT * FROM orders WHERE order_date IS NOT NULL;
      orders 테이블에서 주문 날짜가 존재하는 주문을 찾는 경우.

NOT IN: 목록에 포함되지 않은 값을 찾습니다
   SELECT * FROM employees WHERE department NOT IN ('Sales', 'Marketing');
      employees 테이블에서 부서department가 'Sales' 또는 'Marketing'이 아닌 직원을 찾는 경우.

   SELECT * FROM products WHERE category NOT IN ('Electronics', 'Furniture');
      products 테이블에서 카테고리가 'Electronics' 또는 'Furniture'가 아닌 제품을 찾는 경우.

NOT LIKE: 주어진 패턴과 일치하지 않는 값을 찾습니다
   SELECT * FROM employees WHERE name NOT LIKE 'J%';
      employees 테이블에서 이름이 **'J'**로 시작하지 않는 직원을 찾는 경우.

   SELECT * FROM customers WHERE email NOT LIKE '%@example.com';
      customers 테이블에서 이메일이 '@example.com' 도메인을 포함하지 않는 고객을 찾는 경우.


ㅡㅡㅡㅡ(LIKE 'J%' 와 같은 명령에 대해서)
LIKE 와일드카드 문자
1. %: 0개 이상의 문자와 일치.
   예: LIKE 'A%' (A로 시작하는 모든 문자열)

2. _: 정확히 하나의 문자와 일치.
   예: LIKE 'J_n' ('J'와 'n' 사이에 하나의 문자가 있는 문자열)

>> 주의사항
대소문자 구분: SQL에서 LIKE는 데이터베이스에 따라 대소문자를 구분할 수 있음.
퍼포먼스: %로 시작하는 LIKE 패턴은 인덱스를 효율적으로 사용할 수 없기 때문에 성능에 영향을 줄 수 있음.
   예를 들어, LIKE '%abc'는 성능이 좋지 않지만, LIKE 'abc%'는 성능이 더 우수할 수 있습니다.

1. %: 0개 이상의 문자와 일치.
예시: LIKE 'J%'
   J%는 'J' 다음에 어떤 문자도 올 수 있음을 의미
   J%는 'J'로 시작하는 모든 문자열을 찾습니다.
   예를 들어, 'James', 'John', 'Jill' 등은 모두 이 패턴에 맞습니다.

예시: LIKE '%son'
   %son은 'son'으로 끝나는 모든 문자열을 찾습니다.
   예를 들어, 'Jackson', 'Mason', 'Wilson' 등은 모두 이 패턴에 맞습니다.
   %는 'son' 앞에 어떤 문자가 와도 상관없다는 의미

예시: LIKE '%middle%'
   %middle%는 문자열에 'middle'이라는 부분이 포함된 모든 문자열을 찾습니다. 
   예를 들어, 'in the middle', 'middle of the road' 등은 이 패턴에 일치합니다.
   %는 앞뒤에 아무 문자도 올 수 있음을 의미


2. _: 정확히 하나의 문자와 일치.
예시: LIKE 'J_n'
J_n은 'J'로 시작하고 'n'으로 끝나는 문자열을 찾습니다.
중간에 정확히 하나의 문자가 들어가야 합니다. 예를 들어, 'Jan', 'Jon' 등이 이에 해당합니다.
   
예시: LIKE '_a_berry'
   _a_berry는 두 번째 자리가 'a'인 모든 7글자 단어를 찾습니다. 
   예를 들어, 'Canberry', 'Sabberry' 등이 이 조건을 만족


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

1. DISTINCT
중복된 값을 제거하고 고유한 값을 반환
   SELECT DISTINCT column1 FROM table_name;


4. NULL 체크 (IS NULL, IS NOT NULL)
값이 NULL인지 여부를 검사할 때 사용. WHERE 절에서 사용.
   SELECT column1
   FROM table_name
   WHERE column2 IS NULL;

6. HAVING
GROUP BY로 그룹화된 결과에 대해 조건을 걸 때 사용.
HAVING은 WHERE 절과 유사하지만, GROUP BY 이후에 적용.
   SELECT column1, COUNT(*)
   FROM table_name
   GROUP BY column1
   HAVING COUNT(*) > 5;

7.  GROUP_CONCAT
그룹화된 데이터를 하나의 문자열로 결합할 때 사용됩니다 (MySQL에서 지원).
   SELECT GROUP_CONCAT(column1)
   FROM table_name
   GROUP BY column2;

8. UNION, UNION ALL
여러 개의 SELECT 쿼리 결과를 합칠 때 사용됩니다.
UNION은 중복을 제거하고, UNION ALL은 중복을 허용.
   SELECT column1 FROM table1
   UNION
   SELECT column1 FROM table2;

9. CASE
조건에 따라 다른 값을 반환하고 싶을 때 사용
주로 SELECT 또는 WHERE 절에서 사용
   SELECT column1,
         CASE
            WHEN column2 = 'A' THEN 'Category A'
            WHEN column2 = 'B' THEN 'Category B'
            ELSE 'Unknown'
         END AS category
   FROM table_name;

10. EXISTS
서브쿼리가 결과를 반환하는지 여부를 확인할 때 사용
   SELECT column1
   FROM table_name
   WHERE EXISTS (SELECT 1 FROM table2 WHERE table2.id = table_name.id);


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

>> GROUP BY
기본문법
   SELECT 열1, 집계함수(열2)
   FROM 테이블명
   GROUP BY 열1;

      열1: 그룹화할 기준이 되는 열 (예: 날짜, 카테고리 등)
      집계함수(열2): 그룹화된 각 항목에 대해 수행할 집계 함수 (예: SUM(), AVG(), COUNT() 등)

예시
   학생 테이블에서 각 과목별 점수의 합을 구하고 싶을 때:
      SELECT 과목, SUM(점수) 
      FROM 학생
      GROUP BY 과목;
   판매 테이블에서 각 판매원의 판매 개수를 구하고 싶을 때:
      SELECT 판매원, COUNT(*)
      FROM 판매
      GROUP BY 판매원;

   직원들의 데이터를 담은 employees 테이블이 있고, 각 직책별로 직원 수를 알고 싶습니다.
      SELECT position, COUNT(*) AS num_employees
      FROM employees
      GROUP BY position;


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

>> **그룹 함수(Group Functions)**
그룹 함수는 데이터 집합을 요약하거나 집계하는 데 사용되는 함수들
그룹 함수는 GROUP BY 절과 함께 자주 사용되며, 결과 집합을 그룹으로 묶은 뒤 각 그룹에 대해 특정 계산을 수행

대표적인 그룹 함수: COUNT(), SUM(), AVG(), MAX(), MIN()
**GROUP BY**는 데이터를 그룹화하고, 
**HAVING**은 그룹화된 데이터에 조건을 추가하는 데 사용됩니다.

1.1. COUNT(): 행의 개수
COUNT() 함수는 주어진 컬럼에 대해 값이 존재하는 행의 개수를 반환.
NULL 값을 포함한 모든 행을 셈합니다.

   SELECT COUNT(*) FROM employees;
      employees 테이블에 있는 전체 직원 수를 반환합니다.

   SELECT department, COUNT(*) FROM employees GROUP BY department;
      각 부서별 직원 수를 구합니다. GROUP BY department에 의해 부서별로 그룹화한 후, 각 부서의 직원 수를 셉니다.

1.2. SUM(): 합계
SUM() 함수는 주어진 컬럼의 값들의 합계를 계산합니다. 보통 숫자형 데이터에 사용.

   SELECT SUM(salary) FROM employees;
   employees 테이블에서 모든 직원의 급여 총합을 반환합니다.

   SELECT department, SUM(salary) FROM employees GROUP BY department;
   설명: 각 부서별 급여 총합을 구합니다.

1.3. AVG(): 평균
AVG() 함수는 주어진 컬럼의 값들의 평균을 반환

   SELECT department, AVG(salary) FROM employees GROUP BY department;
   설명: employees 테이블에서 모든 직원의 평균 급여를 반환합니다.

1.4. MAX(): 최댓값
MAX() 함수는 주어진 컬럼의 최댓값을 반환

   SELECT department, MAX(salary) FROM employees GROUP BY department;
   employees 테이블에서 직원들의 급여 중 가장 높은 급여를 반환합니다.

1.5. MIN(): 최솟값
MIN() 함수는 주어진 컬럼의 최솟값을 반환

   SELECT department, MIN(salary) FROM employees GROUP BY department;
   employees 테이블에서 직원들의 급여 중 가장 낮은 급여를 반환합니다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

GROUP BY 절과 함께 사용하는 경우

   SELECT department, COUNT(*) AS employee_count 
   FROM employees
   GROUP BY department;

employees 테이블에서 각 부서별 직원 수를 구하는 쿼리입니다.
설명: GROUP BY department는 부서별로 데이터를 그룹화하며, COUNT(*)는 각 부서에 속한 직원 수를 계산합니다.

   SELECT department, AVG(salary) AS average_salary 
   FROM employees
   GROUP BY department;
설명: 각 부서별 평균 급여를 구하는 쿼리입니다. AVG(salary)는 각 부서의 급여 평균을 계산합니다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

HAVING 절
HAVING 절은 GROUP BY로 그룹화된 데이터에 대해 조건을 지정하는 데 사용됩니다.
WHERE 절과 비슷하지만, WHERE는 그룹화 전의 데이터에 조건을 걸고, HAVING은 그룹화 후의 데이터에 조건을 걸 수 있습니다.

   SELECT department, COUNT(*) AS employee_count
   FROM employees
   GROUP BY department
   HAVING COUNT(*) > 10;

설명: 각 부서별 직원 수가 10명 이상인 부서만 반환합니다.
HAVING COUNT(*) > 10은 그룹화된 각 부서에 대해 직원 수가 10명 이상인 경우만 필터링합니다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
그룹 함수의 특징
1. NULL 처리:
   COUNT()는 NULL을 제외한 값만 셉니다. COUNT(*)는 NULL을 포함한 모든 행을 셉니다.
   SUM(), AVG(), MAX(), MIN()은 NULL 값을 무시합니다.

2. 복합 조건 사용:
   여러 개의 그룹 함수를 한 번에 사용할 수 있습니다.
   예를 들어, 각 부서별 평균 급여와 급여 총합을 동시에 구할 수 있습니다.
      SELECT department, AVG(salary) AS average_salary, SUM(salary) AS total_salary
      FROM employees
      GROUP BY department;

