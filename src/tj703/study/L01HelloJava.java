// 한줄 주석
/* 여러줄 주석
 * 여러줄 주석
 *  */

package tj703.study;  //  클래스를 관리하는 폴더 (클래스명을 중복되지 않게, 유일하게 만들어준다)
// 패키지명을 보통 도메인으로 하는데, 도메인은 세상에 하나만 지정할 수 있기 때문에, 내부에 존재하는 클래스명 역시 유일한 이름이 된다.

// 문서명과 클래스 이름이 같은 이유; 자바는 한 파일에 하나의 클래스만 있을 수 있어.
// 그래서 자바 파일의 이름은 항상 public class 이름과 같아야 해.
// 예를 들어, MyProgram.java라는 파일 안에 public class MyProgram이라는 클래스를 넣으면, 파일 이름과 클래스 이름이 같아야만 해.

// 자바 파일에는 public class가 하나만 있을 수 있습니다.
// 자바에서 public class는 하나의 파일에 한 번만 정의할 수 있다는 규칙이 있습니다.
// 하지만 파일 내에 여러 개의 클래스를 정의하는 것은 가능합니다.
// 다만, 그 중 하나만 public class가 될 수 있습니다.


public class L01HelloJava { // 클래스 : 객체 데이터의 타입.
   // public class: 자바는 문서를 무조건 class로 만드는데, public class는 문서명과 같은 class이면서, 외부 라이브러리로도 사용가능하다.

   public static void main(String[] args) {
      // 어플리케이션에 오직 1개만 존재하는 함수. 해당 어플의 실질적인 실행을 명시한다
      // public; 공유가능 / 접근 제어자로서, 해당 메서드가 다른 클래스에서도 접근 가능함을 의미합니다.
      // static; 메모리 영역 / 이 메서드가 클래스의 인스턴스를 생성하지 않고도 호출될 수 있음을 의미
      // void; 반환하는 것이 없는 함수
      // main; 메서드의 이름으로, Java 프로그램이 시작될 때 호출되는 진입점
      // (String[] args); 매개변수로 어플 설정의 초기값 / 문자열 배열로, 프로그램이 시작될 때 설정된 값을 저장한다.
      System.out.println("안녕! Java 시작");
   }
}

class User {// (public을 안붙인 것)은 외부에서 사용할 수 없는 class이면서, 해당 .java문서에 포함된 클래스이다. 하지만 class문서로 컴파일은 된다.
}
    /*  자바에서 class를 만들고 실행하는 방법
   class를 작성시, 꼭 java 문서의 이름이 public class 명과 같아야 함
      예) public class A{} ->문서이름 A.java

   class 명의 규칙 : 카멜(변수,메소드),파스칼,스네이크(대문자->상수, 소문자->파일,폴더)
      대명사->파스칼 JavaStudy : 데이터의 타입이 되기 때문

   어플전체에서 실행되는 메소드가 존재 (main)
      public static void main(String[]args){}

   javac(자바의 컴파일러)로 .java문서를 .class문서로 컴파일.
         컴파일 compile:  컴퓨터(jvm 자바엔진)가 읽기 좋게 변환
            컴파일시 오류가 발견되면 배포하지 않는다.(배포 : 실행되는 코드를 리소스로 만드는 행위)
            실행속도가 빠르다.(인터프리터 엔진보다)
         javac <파일명> => javac A.java
         java(jvm, java virtual machine)or(JRE, Java Runtime Environment)로  main이 작성된 class문서를 실행
         java A : main이 작성된 컴파일된 class 문서 A를 실행


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Java에는 JVM, JRE, JDK 세 가지 주요 구성 요소
JVM은 자바 프로그램을 실행하는 가상 머신입니다.
JRE는 자바 프로그램을 "실행"하기 위한 환경이며, JVM과 라이브러리를 포함합니다. (사용자)
JDK는 자바 프로그램을 "개발"하고 실행하기 위한 전체 도구 세트입니다. (개발자)

JVM (Java Virtual Machine)
   JVM은 Java 가상 머신으로, 자바 애플리케이션이 실행되는 환경을 제공합니다.
   자바 프로그램이 작성된 후, JVM은 이 프로그램을 실행할 수 있도록 합니다.

   주요 역할은 다음과 같습니다:
   바이트코드 실행: 자바 컴파일러가 생성한 바이트코드를 실행합니다.
   메모리 관리: 가비지 컬렉션을 통해 메모리를 효율적으로 관리합니다.
   플랫폼 독립성: Java 프로그램이 어떤 운영체제에서도 실행될 수 있도록 합니다.

JRE (Java Runtime Environment)
   JRE는 Java 실행 환경으로,
   JVM과 함께 자바 애플리케이션을 실행하는 데 필요한 라이브러리와 기타 파일들을 포함합니다.
   JRE는 다음을 포함합니다: JVM, 클래스 라이브러리, 기타 지원 파일
   간단히 말해, JRE는 자바 프로그램을 실행하기 위한 환경을 제공합니다.

JDK (Java Development Kit)
   JDK는 자바 개발 키트로, 자바 애플리케이션을 개발하고 실행하는 데 필요한 모든 도구와 라이브러리를 포함합니다. JDK는 다음을 포함합니다:
   JRE: JRE는 JVM과 라이브러리를 포함하므로, JDK 내에 JRE가 포함되어 있습니다.
   개발 도구: 자바 컴파일러, 디버거, 문서화 도구 등 자바 애플리케이션을 개발하는 데 필요한 다양한 도구들을 포함합니다.
   JDK를 사용하면 자바 프로그램을 작성, 컴파일, 디버깅, 실행할 수 있습니다.

 */

/*
Java는 객체 지향 프로그래밍(OOP) 언어로,
   프로그램을 객체라는 단위로 나누어 다루는 방식입니다.


   1. 클래스와 객체
    클래스=생성자함수 / 객체=인스턴스 객체

   > 클래스(Class): 클래스는 객체를 생성하기 위한 설계도입니다.
      즉, 클래스는 객체의 속성(변수)과 동작(메서드)을 정의하는 틀입니다.
      클래스 내부에는 객체의 상태를 나타내는 변수와, 객체가 할 수 있는 동작을 정의하는 메서드가 포함.
      (ex) Car라는 클래스는 자동차의 속성(예: 색상, 모델)과 동작(예: 달리기, 멈추기)을 정의합니다.

   > 변수Variable :  인스턴스 객체가 가지고 있을 값,데이터를 저장하는 공간(을 만드는 것)입니다.
         변수는 객체의 속성을 나타냅니다. 예를 들어, 사람 클래스를 만든다면, 사람 객체는 이름, 나이, 성별 등의 정보를 가질 수 있겠죠.
    - 자바에서 변수의 구분
      로컬 변수 (Local Variable): 메서드나 블록 안에서 선언된 변수로, 해당 메서드나 블록의 실행 중에만 존재합니다.
      매개변수 (Parameter): 메서드의 인수로 전달되는 변수입니다.
      필드 (Field): 클래스 내에서 선언된 변수로, 객체의 상태를 저장합니다.

   > 속성 (Property)
      클래스의 필드에 대한 접근을 위해 getter와 setter 메서드를 사용하여
      외부에서 값을 가져오거나 설정할 수 있는 방식입니다.

   > 메서드(기능, Method): 객체가 수행할 수 있는 동작이나 기능을 정의하는 코드의 집합입니다.
         예를 들어, 사람 클래스에 "걷기"라는 메서드가 있을 수 있습니다.
         자바에서 메서드는 클래스의 행동을 정의하며, 객체가 수행할 수 있는 기능을 제공합니다.
         메서드는 함수의 형태로, 입력(매개변수)을 받아서 특정 작업을 수행하고, 결과를 반환할 수도 있습니다.

   2. 객체(Object): 자바에서 모든 객체라는 말은 인스턴스 객체를 말한다.
      객체는 클래스에 정의된 속성과 동작을 가진 실제 인스턴스입니다.
      (ex) myCar라는 객체는 Car 클래스를 기반으로 생성된 실제 자동차

ㅡㅡㅡㅡㅡㅡㅡㅡㅡ

   3. 상속(Inheritance)
   상속은 한 클래스가 다른 클래스의 속성과 동작을 물려받는 기능입니다. 이로 인해 코드의 재사용성이 높아집니다.
   js과 같은 <프로토타입 언어>와, java와 같은 <객체지향 언어>의 상속 개념의 구체적인 내용은 서로 다르다.
   <java는 객체 지향 언어>는 클래스 기반 상속을 말한다.
    즉, 클래스 간의 영향을 주고 받는 것을 상속의의 부모-자식관계로 표현한다.
      (ex) Sedan 클래스는 Car 클래스를 상속받을 수 있습니다.
   그러면 Sedan 클래스는 Car 클래스의 속성(색상, 모델)과 동작(달리기, 멈추기)을 물려받습니다.

   4. 다형성(Polymorphism)
   같은 이름의 메서드가 다양한 방식으로 동작할 수 있는 능력
   Car 클래스와 Truck 클래스가 각각 move()라는 메서드를 가질 때, 각 클래스에 맞게 다르게 동작할 수 있습니다.
      java에서의 다형성은 세 개의 경우에서 언급된다.
      1) 클래스(타입)의 다형성
      2) 오버로딩 (하나의 클래스 내부에서 동명의 메서드)
      3) 오버라이딩 (상속받은 클래스에서 동명의 메서드)
      이후에 구체적으로 설명될 것.

   5. 캡슐화(Encapsulation)
   캡슐화는 데이터(변수)와 그 데이터를 처리하는 메서드들을 하나로 묶어서 외부로부터 숨기는 개념입니다.
   이를 통해 객체의 데이터를 보호하고, 코드의 유지보수를 쉽게 할 수 있습니다.
   (ex) 자동차 객체의 속도는 외부에서 직접 변경할 수 없고, accelerate()나 brake() 메서드를 통해서만 속도를 조절할 수 있게 하는 방식입니다.

   6. 추상화(Abstraction)

   7. 인터페이스(Interface)
   (엉성한 틀, "포유류", "탈 것"와 같은 여러 클래스들을 묶을 추상적인 대분류를 만드는 작업)
   인터페이스는 클래스가 어떤 메서드들을 구현해야 할지 정의한 계약입니다.
   (ex) Vehicle라는 인터페이스는 move()와 stop() 메서드를 정의할 수 있습니다.
   Car와 Truck 클래스는 이 인터페이스를 구현하여 자신만의 방식으로 move()와 stop()을 실행합니다.

ㅡㅡㅡㅡㅡㅡㅡㅡ
 ?? 자바에서는 함수라는 개념이 없구나?
   맞습니다! Java에서는 함수라는 개념이 따로 존재하지 않습니다.
   Java는 객체 지향 프로그래밍(OOP) 언어이기 때문에, 코드의 기능을 클래스와 메서드를 중심으로 구성합니다.
   js각 함수형언어 = 프로토타입언어다.

   >>> 함수와 메서드 차이점
   > 함수(Function):
      절차적 프로그래밍 언어에서 사용되는 개념으로, 독립적으로 동작하는 코드 덩어리를 의미합니다.
      함수는 보통 어떤 작업을 수행하고 값을 반환하는 단위로 존재합니다.
   > 메서드(Method):
      객체 지향 프로그래밍 언어인 Java에서 사용되는 개념으로, 클래스 안에 속한 함수입니다.
      즉, Java에서는 함수라는 개념 대신 메서드라는 용어를 사용합니다.
      메서드는 객체의 상태를 변경하거나, 객체의 동작을 정의하는 역할을 합니다.

  ?? 왜 Java에는 함수가 없나?
   Java는 객체 지향 언어이기 때문에, 모든 코드는 클래스 안에서 정의되어야 합니다.
   즉, Java에서는 코드의 실행 단위가 클래스 내에 정의된 메서드입니다.
   함수는 객체 지향적인 맥락에서는 잘 맞지 않기 때문에, 대신 메서드라는 용어를 사용하게 된 것입니다.
   Java에는 함수라는 개념이 따로 존재하지 않고, 모든 작업은 메서드라는 개념을 통해 수행됩니다.

ㅡㅡㅡㅡㅡㅡㅡㅡ
Java가 컴파일러 언어다???

 java작업하면 java 파일과 class 파일이 만들어지는 이유는 Java가 컴파일러 언어이기 때문입니다

   cf. 프로그래밍 언어는 크게 컴파일러 방식과 인터프리터 방식으로 나눌 수 있습니다.
   > 컴파일러 방식 (예: Java, C)
      작동 방식: 소스 코드를 미리 한 번에 전체 컴파일러가 컴퓨터가 이해할 수 있는 기계어(또는 중간 코드)로 변환합니다.
   > 인터프리터 방식 (예: Python, JavaScript)
      작동 방식: 소스 코드를 한 줄씩 즉시 실행합니다. 변환 없이 바로 실행되는 형태입니다.

"컴파일러 언어"는 소스 코드를 컴퓨터가 이해할 수 있는 형태로 변환하는 과정을 거치는 언어를 의미합니다.
컴퓨터는 0과 1의 코드만 이해할 수 있는데, 우리가 사용하는 프로그래밍 언어(예: Java, C)는 사람에게 더 이해하기 쉬운 형태로 작성됩니다. 이때, 컴파일러라는 프로그램이 사람의 언어(소스 코드)를 컴퓨터가 이해할 수 있는 기계어로 변환해 주는 역할을 합니다.

Java 예시를 보면:
1. 우리가 Java 코드(소스 코드)를 작성하면,
2. 자바 컴파일러가 이 코드를 바이트 코드(class 파일)로 변환합니다.
3. 이 바이트 코드는 Java 가상 머신(JVM)에서 실행되어 실제로 컴퓨터가 동작하도록 합니다.

.java 파일: 사람이 작성하는 소스 코드 파일.
.class 파일: 컴퓨터가 이해하고 실행할 수 있는 바이트코드 파일. Java 프로그램을 실행할 수 있게 해줍니다.
   1) .java 파일:
      이것은 소스 코드 파일입니다.
      Java 프로그램을 작성할 때 작성하는 파일로, 우리가 실제로 작성한 코드가 들어 있습니다.
      예를 들어, HelloWorld.java라는 파일에 HelloWorld 클래스를 정의할 수 있습니다. 이 파일은 사람이 읽고 작성하는 코드입니다.
   2) .class 파일:
      .java 파일을 컴파일하면, Java 컴파일러(javac)는 해당 코드를 바이트코드로 변환합니다.
      이 변환된 코드가 .class 파일로 저장됩니다.
      .class 파일은 **Java Virtual Machine(JVM)**에서 실행될 수 있는 코드입니다.
      즉, .class 파일은 Java 프로그램이 실제로 실행될 수 있도록 준비된 코드로, JVM이 이 바이트코드를 읽고 실행하는 역할을 합니다.

ㅡㅡㅡㅡㅡㅡㅡㅡ
자바 시작하기에 앞서

   1. 출력하기
   JS에서는 console.log()와 같은 기능이,
   Java에서는 System.out.println()을 사용합니다.

   2. 변수 선언
   Java에서는 변수를 선언할 때 그 타입(예: int, String)을 명시해야 합니다.
   (기본형데이터는 소문자로, 자료형데이터는 대문자 타입을 명시한다.
   (ex) int x = 5; (정수형 x 변수에 5를 저장)
   int란 정수(integer); int는 정수를 저장할 수 있는 변수의 타입을 지정하는 데 사용됩니다.

      JavaScript에서는 타입을 명시하지 않아도 됩니다.
      (ex) let x = 5; (동적으로 변수 x에 5를 저장)

      2-1. 상수 선언
      (js)   const x = 5;
      (java) final int x = 5;

   3. 함수 정의
   Java에서 함수라는 개념이 없고, 기능을 하는 코드의 집합을 **메서드(method)**라고 부르며,
    메서드는 클래스 안에 정의되어야 합니다.
    변수에 타입을 정의하듯, 메서드에도 타입과 성질을 명시하는데, void나 int 같은 것들이 있다.
      (ex) void sayHello()는, 결과값을 반환하지 않고, "Hello"를 출력하는 메서드를 정의하는 코드입니다.


ㅡㅡㅡㅡㅡㅡㅡㅡ
java의 있어서 필수 명렁어,연산자,명칭

> 접근제어자
   public : 접근 제어자. 공개된 클래스, 메서드, 변수 등을 의미합니다. 다른 클래스에서 접근 가능합니다.
   private : 접근 제어자. 비공개된 클래스, 메서드, 변수 등을 의미합니다. 같은 클래스 내에서만 접근 가능합니다.
   protected : 접근 제어자. 자식 클래스에서 접근할 수 있는 멤버입니다. 같은 패키지 내에서 접근도 가능합니다.

   static : 정적 키워드. 객체를 생성하지 않고 클래스 레벨에서 접근할 수 있는 멤버를 정의합니다. 메서드나 변수가 해당됩니다.
   void : 반환값 없음을 의미합니다. 메서드가 값을 반환하지 않을 때 사용합니다.

   final : 상수를 정의하는 키워드로, 한 번 초기화된 값을 변경할 수 없게 합니다. 또한, 클래스나 메서드를 상속하거나 오버라이드할 수 없게 만들기도 합니다.

   int : 정수형 데이터를 정의하는 타입입니다. 소수점 없는 숫자를 다룹니다.
   double : 실수형 데이터를 정의하는 타입으로, 소수점이 있는 숫자를 다룹니다.
   boolean : 논리형 데이터를 정의하는 타입입니다. 참(true) 또는 거짓(false)을 표현합니다.
   String : 문자열을 다루는 타입입니다. 문자열 데이터를 저장하는 데 사용됩니다.
   enum : 열거형을 정의하는 키워드입니다. 상수값을 여러 개 나열하여 정의할 수 있습니다.

   this : 현재 객체를 참조하는 키워드입니다. 메서드나 생성자에서 사용하여 자신을 참조합니다.
   super : 부모 클래스를 참조하는 키워드입니다. 자식 클래스에서 부모 클래스의 멤버를 호출하거나 참조할 때 사용됩니다.
   new : 객체 생성을 위한 키워드입니다. 클래스의 인스턴스를 만들 때 사용됩니다.

   try : / catch 예외 처리를 위한 키워드입니다.
      예외가 발생할 수 있는 코드를 try 블록에 작성하고, 발생한 예외를 catch 블록에서 처리합니다.
   throw : 예외를 발생시키는 키워드입니다. 특정 조건에서 예외를 직접 발생시킬 때 사용됩니다.


   interface : 인터페이스를 정의하는 키워드입니다. 추상 메서드를 선언하고, 이를 구현한 클래스가 이를 실제로 구현합니다.
   extends : 상속을 나타내는 키워드입니다. 자식 클래스가 부모 클래스를 상속받을 때 사용됩니다.
   implements: 인터페이스 구현을 나타내는 키워드입니다. 클래스가 인터페이스를 구현할 때 사용됩니다.

   return : 메서드에서 값을 반환할 때 사용하는 키워드입니다. 메서드가 끝나면서 값을 반환합니다.
   break : 반복문이나 switch문을 종료시키는 키워드입니다.
   continue : 반복문에서 현재 반복을 건너뛰고 다음 반복으로 넘어가게 하는 키워드입니다.

ㅡㅡ
>접근제어자
   public, private, **protected**는 **접근 제어자(Access Modifier)**입니다.
   이들은 클래스, 메서드, 변수에 대한 접근 수준을 정의합니다.
      public: 다른 클래스에서도 접근 가능
      private: 동일 클래스 내에서만 접근 가능
      protected: 같은 패키지 내에서 또는 상속된 자식 클래스에서 접근 가능

   cf. 접근제어자의 "public"과 "public class"는 다른 용도, 다른 개념

   접근제어자에서 public라고 할당하면, "public"이라고 하면 이 클래스가 누구나 사용할 수 있다는 뜻이야. 즉, 외부에서 이 클래스를 다른 프로그램이나 라이브러리에서도 사용할 수 있도록 공개하는 거지.

   public class란 무엇인가? 자바에서 public class는 특별한 클래스야.
   하나의 자바파일의 하나만 있는 public 클래스는 파일명과 일치해야 한다는 규칙이 있습니다.

ㅡㅡ

  **static**은 **정적(Static)**을 의미합니다.
   이 키워드는 클래스, 메서드, 변수, 코드 블록 등에 사용될 수 있음.

   static을 사용하면 해당 필드나 메서드가 클래스 수준에서 동작하게 되어, 객체를 생성하지 않고도 사용할 수 있습니다.
   반면에 static이 없는 변수나 메서드는 객체를 생성한 후에만 사용할 수 있습니다.
   즉, static이 없는 멤버는 객체에 속하기 때문에 객체가 있어야만 접근할 수 있습니다.
   예를 들어 static 메서드는 객체 없이도 클래스명.메서드명() 형식으로 호출할 수 있습니다.

ㅡㅡ
   **final**은 **상수(Constant)**를 나타내는 키워드입니다. final이 붙은 변수는 한 번 초기화하면 변경할 수 없고, final 클래스는 상속할 수 없으며, final 메서드는 오버라이드할 수 없습니다.

   **void**는 반환값 없음을 의미합니다. 메서드가 결과값을 반환하지 않음을 나타냅니다.

   int는 정수형 데이터를,
   double은 실수형 데이터를,
   boolean은 참/거짓 값을 나타냅니다.

   **this**는 현재 객체를 가리키는 참조입니다.
   메서드 안에서 객체의 속성이나 메서드에 접근할 때 사용됩니다.

   **super**는 부모 클래스의 멤버를 참조하는 키워드입니다.
   상속 관계에서 자식 클래스가 부모 클래스의 메서드나 속성에 접근할 때 사용됩니다.


ㅡㅡㅡㅡㅡㅡㅡㅡ
   Java 문법의 절대 규칙

   1. 대소문자 구분 (Case Sensitivity)
      Java는 대소문자를 "구분"합니다.
      예를 들어, MyVariable, myvariable, MYVARIABLE은 모두 다른 변수로 취급됩니다.
      int myVariable = 10;
      int MyVariable = 20; // 다른 변수

   2. 클래스 선언과 메서드
      Java는 모든 코드가 클래스 내에서 작성됩니다. 메서드와 변수도 반드시 클래스 안에 있어야 합니다.
      Java는 public, private, static 등 접근 제어자를 사용하여 클래스에 대한 접근 범위를 지정합니다.
      Java의 메서드는 반드시 return 타입을 명시해야 하며, **void**는 반환값이 없다는 뜻입니다.

   3.변수 선언과 타입 지정
      Java는 정적 타입 언어이므로, 변수 선언 시 반드시 타입을 명시해야 합니다.
      예를 들어, int, String, double 등 타입을 지정합니다.
      타입을 지정하는 이유는 메모리 할당과 타입에 맞는 연산을 보장하기 위함입니다.
      int number = 10; // 정수형 변수
      double price = 20.5; // 실수형 변수
      String name = "Java"; // 문자열 변수

   4. statements (문장) 끝에 세미콜론 사용
      Java에서 모든 문장은 세미콜론(;)으로 끝납니다. 꼭.꼭.
      이는 한 줄의 코드가 끝났음을 알려주는 역할을 합니다.

   5. 제어문 (조건문, 반복문 등)
      Java에서 조건문과 반복문은 JavaScript와 비슷하지만, **괄호({})**를 사용하여 블록을 명확히 구분합니다.
      코드 블록은 반드시 중괄호로 감싸야 합니다. [축약문 없음]

   6. 배열 (Array)
      Java에서 배열은 고정된 크기를 가지며, 데이터 타입을 명시해야 합니다.
      배열은 인덱스를 통해 접근합니다.
      int[] numbers = {1, 2, 3, 4, 5}; // 배열 선언
      System.out.println(numbers[0]); // 첫 번째 요소 접근

   7. 메서드 호출과 객체 생성
      Java에서는 메서드 호출 시, 먼저 해당 객체를 생성한 후 메서드를 호출할 수 있습니다
      (단, static 메서드는 객체 없이 호출 가능).
      객체는 new 키워드를 사용해 생성합니다.



 */
