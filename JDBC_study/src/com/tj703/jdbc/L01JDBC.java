package com.tj703.jdbc;

/*
기본적인 웹 애플리케이션 구조는 클라이언트, 서블릿 컨테이너, 그리고 데이터베이스로 나누어 이해할 수 있다.

프론트앤드 : 클라이언트
html, css, javascript 작업

백엔드 : 서블릿 컨테이너 &  데이터베이스
    1) 서블릿 컨테이너
    - 클라이언트가 요청을 보내면
    중간자인 서블릿 컨테이너가 받아
    서버에서 관련 db를 처리하고 담당하고,
    JSP(JavaServer Pages)는 사용자(클라이언트)에게 보여주는 화면을 다시 만들어서
    클라이언트에게 보낸다.
    - 서블릿 컨테이너는 클라이언트 요청을 적절한 서블릿에 전달하고, 서블릿이 데이터를 처리한 후 결과를
    HTML 등의 형식으로 만들어(jsp) 클라이언트에게 응답을 보냅니다.

     2) 데이터 베이스
        데이터베이스는 웹 애플리케이션에서 필요한 데이터를 저장하고 관리하는 곳


구조를 더 세분해서 나누면
클라이언트 -> 웹서버(WS) -> 웹앱서버(WAS) -> DB

1. 클라이언트
사용자가 사용하는 웹 브라우저 또는 사용자 기기에 실행된 어플리케이션.
웹 브라우저는 서버에 HTTP 요청을 보냅니다.

2. 웹서버 web server
웹 서버는 클라이언트(주로 웹 브라우저)에서 보내는 HTTP 요청을 받아들이고,
동적인 처리가 필요하면 웹 애플리케이션 서버(WAS)로 요청을 전달합니다.
또는 요청에 맞게 WAS로부터 제공된 웹 페이지나 파일을 클라이언트에게 다시 전달하는 역할

3. 웹앱서버 WAS, web application server
웹 서버의 역할에 추가로, 동적인 콘텐츠(사용자의 요청에 따라 결과가 달라지는 콘텐츠)를 처리
그 정보를 처리하는 서블릿을 실행하고, 그 결과를 웹 페이지로 적절히 만들어서 반환하는 일

    3-1 웹 컨테이너 (Web Container)
    웹 컨테이너는 서블릿과 JSP를 관리하고 실행하는 특정 기능을 가진 서버입니다.
    웹 컨테이너는 서블릿을 실행하여 클라이언트 요청을 처리하고,
    JSP 페이지를 실행하여 동적으로 콘텐츠를 생성하는 역할을

        3-1-1 서블릿 (Servlet)
        서블릿(Servlet)은 서버 측에서 요청을 동적으로 처리하는 Java 클래스 코드 뭉치.
        서블릿의 주요 역할은 동적인 콘텐츠 생성
        클라이언트가 요청을 보내면, 서블릿이 그 요청을 처리하고 필요한 데이터를 데이터베이스에서 조회하거나,
        다른 작업을 하고, 그 결과를 HTML 형식으로 만들어 클라이언트에게 보냅니다.

        3-1-2 JSP (JavaServer Pages)
        JSP는 HTML과 Java 코드를 결합하여 동적 웹 페이지를 만들기 위한 기술.
        JSP는 HTML 코드 안에 자바 코드를 삽입하여, 클라이언트에게 보여줄 동적인 웹 페이지를 만듭니다.
        JSP는 기본적으로 서블릿으로 변환되어 실행되기 때문에, 실제로는 JSP도 서블릿의 역할을 수행합니다.
         즉, JSP는 서블릿의 편리한 방식이라고 볼 수 있습니다.

         3-1-3 JavaBean
        JavaBean은 서블릿과 JSP에서 데이터 캡슐화, 비즈니스 로직 처리, 데이터 전달을 담당하는 클래스입니다.
        서블릿은 JavaBean을 사용하여 서버 측에서 데이터를 처리하고,
        그 데이터를 JSP로 전달하여 클라이언트에게 보기 좋은 형태로 출력할 수 있습니다.
        JavaBean은 서블릿과 JSP 간의 데이터 모델 역할을 하며,
        재사용 가능한 컴포넌트로서 웹 애플리케이션의 핵심적인 역할


구조를 더더 세분해서 나누면
클라이언트 -> 웹서버(WS) -> 웹앱서버(WAS) -> DB
+ 로드 밸런서 (Load Balancer) : 트래픽울 분산하여 전달
+ 캐시 (Cache)(클라이언트쪽에서) : 자주 사용되는 데이터나 응답을 미리 저장해 두고, 후속 요청 시 빠르게 응답을 제공하는 기술.
예를 들어, 사용자 프로필 정보나 자주 조회되는 상품 목록을 캐시
캐시는 클라이언트 쪽(웹 브라우저)에 자주 사용하는 정적 데이터(예: 이미지, 스타일시트, 스크립트 등)를 저장해서 성능을 개선하는 데 사용됩니다.
+ 세션 관리(서버쪽에서)는 사용자의 로그인 상태나 장바구니 정보 등을 서버에서 기억하는 기능입니다.
세션은 서버 쪽에서 사용자 상태(예: 로그인 정보, 장바구니 등)를 저장하고, 클라이언트가 서버와 상호작용할 때 그 상태를 유지하는 데 사용됩니다.

웹 애플리케이션 흐름에 대한 보충 설명:
1. 클라이언트 (브라우저)가 요청을 보냅니다.
2. 로드 밸런서가 트래픽을 여러 서버로 분배할 수 있습니다.
3. 요청은 웹 서버에 도달하고, 정적 콘텐츠는 바로 반환되며, 동적 콘텐츠의 경우 웹 애플리케이션 서버(서블릿 컨테이너)로 전달됩니다.
4. 서블릿이 클라이언트의 요청을 처리하고, 필요시 데이터베이스에서 데이터를 가져옵니다.
5. 애플리케이션 서버가 비즈니스 로직을 처리하고, 그 결과를 JSP를 통해 동적으로 웹 페이지로 생성하여 클라이언트에게 응답합니다.
6. 이 모든 과정에서 캐시가 사용될 수 있으며, 사용자의 로그인 상태나 장바구니 정보를 세션으로 관리할 수 있습니다.
7. 애플리케이션이 외부 시스템과 상호작용해야 할 경우, API를 사용하여 연동할 수 있습니다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Node.js — 웹 애플리케이션 서버를 만들 수 있는 JavaScript 런타임 환경
Spring — 자바 기반의 웹 애플리케이션 프레임워크


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
서버 사이드 렌더링(SSR, Server-Side Rendering)과
클라이언트 사이드 렌더링(CSR, Client-Side Rendering)은
웹 애플리케이션의 HTML을 생성하는 위치와 방법에 따라 구분되는 두 가지 주요 렌더링 방식

> 서버 사이드 렌더링
서버 사이드 렌더링은 웹 페이지의 HTML을 서버에서 생성한 후, 클라이언트(브라우저)에 전달하는 방식입니다.
서버가 모든 HTML 콘텐츠를 미리 렌더링해서 브라우저에 보냅니다.

>클라이언트 사이드 렌더링 CSR
웹 페이지의 HTML을 서버에서 보내는 것이 아니라,
브라우저에서 JavaScript를 실행하여 동적으로 HTML을 생성하는 방식입니다.
즉, 초기에는 빈 HTML 구조만 클라이언트에 전달되고,
이후 JavaScript가 실행되어 콘텐츠가 동적으로 채워집니다.
사용자와의 상호작용에 따라 JavaScript가 실행되고, 
AJAX나 Fetch API 등을 사용하여 추가 데이터를 서버에서 받아와서 페이지에 표시할 수 있습니다.
CSR을 사용하는 대표적인 프레임워크는 React, Vue.js, Angular 등

 */


// ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
// JDBC(Java Database Connectivity):  java로 db를 접속하는 방법, 클래스, 패키지
// java.sql : JDBC 패키지들. jdk에서 제공.
// mysql-connector-j 자바에서 db에 접속할 때, mysql db 접속에 필요한 패키지들
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

// 다른 import 설명
import java.lang.*; // jvm이 실행될 때 필요한 기본클래스들의 집합. 자동으로 import해서 사용
// Object, Integer, String(랩퍼클래스), Exception
import java.util.*; // List, ArrayList, Date, map ...


public class L01JDBC {
    // main = jvm을 호출해서 실행되는 실질적 어플
    public static void main(String[] args) {
        System.out.println("jbdc 시작");

        Connection conn = null;

        String user = "root";
        String password = "mysql";
        String url = "jdbc:mysql://localhost:3306/sakila";
        // localhost : 내컴퓨터에 켜져있는 서버에 접속
        // 3306 : port 번호는 os에서 프로그램에 제공하는 고유번호
        // localhost:3306 :  내컴퓨터에 설치된 mysql 서버프로그램
        // http://이 통신규약인 것처럼, jdbc:mysql:// 은 자바로 db에 접속하는 통신규약을 사용하여 mysql에 접속하겠다)

        // 네트워크 상의 접속은 항상 오류를 점정적으로 동반함
        // 1) 물리적 충격으로 끊어지는 상황(인터넷 끊김, 전기 나감 ..)
        // 2) 시스템적으로 끊어지는 상황 (주소를 못찾거나, 파일의 일부(패킷) 몇개가 동작하지 않음.
        // 3) 접속하려는 네트워크 보안에 걸리는 상황(방화벽, id&pw 오류,
        // 따라서 오류를 관리해야함 -> try_catch
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            // DriverManager가 mysql에 접속하려고 할 때, 객체를 만들려고 미리 지정 => 동적로딩
            // 동적로딩, 바로 클래스를 만드는 것이 아니라 필요할 때 쓰도록 준비해놓는 것.
            conn = DriverManager.getConnection(url, user, password);
            // java로 mysql에 접속
            System.out.println(conn);

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
